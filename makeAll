#!/bin/bash
cd `dirname $0`

# User choice: choose a build mode (opt or dbg)
###lcg_mode=dbg
lcg_mode=opt

#------------------------------------------------------------------------------

# Set up Boost and ROOT from LCG views on cvmfs
# Path to LCG view location on cvmfs
lcgviews=/cvmfs/sft.cern.ch/lcg/views
if [ ! -d ${lcgviews} ]; then
  echo "ERROR! Directory '${lcgviews}' does not exist"
  exit 1
fi

# Check that the host architecture (LCG_arch) is supported
lcg_arch=$(make -f cmake.mk print-LCG_arch)
if [ "${lcg_arch}" != "x86_64" ]; then
  echo "ERROR! Unknown architecture '${lcg_arch}'"
  exit 1
fi

# Set CMAKE_BUILD_TYPE from the LCG build mode
if [ "${lcg_mode}" == "opt" ]; then
  LCG_mode=${lcg_mode}
  CMAKE_BUILD_TYPE=Release
elif [ "${lcg_mode}" == "dbg" ]; then
  LCG_mode=${lcg_mode}
  CMAKE_BUILD_TYPE=Debug
else
  echo "ERROR! Unknown build mode '${lcg_mode}'"
  exit 1
fi
CMAKEFLAGS="-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE $CMAKEFLAGS"

# Check that the host O/S (LCG_os) is supported
# Use a different LCG view depending on LCG_os
# Use a different compiler depending on LCG_os
lcg_os=$(make -f cmake.mk print-LCG_os)
if [ "${lcg_os}" == "slc6" ]; then
  lcg_compiler=gcc49
  lcg_system=${lcg_arch}-${lcg_os}-${lcg_compiler}-${LCG_mode}
  SETUPSH=". ${lcgviews}/LCG_72a/${lcg_system}/setup.sh"
elif [ "${lcg_os}" == "centos7" ]; then
  lcg_compiler=gcc62
  lcg_system=${lcg_arch}-${lcg_os}-${lcg_compiler}-${LCG_mode}
  SETUPSH=". ${lcgviews}/LCG_93/${lcg_system}/setup.sh"
else
  echo "ERROR! Unknown O/S ${lcg_os}"
  exit 1
fi
eval '${SETUPSH}'

# Set the build flags (C++ std) appropriate to each compiler in LCG views
if [[ ${lcg_compiler} == *gcc6* ]]; then
  CMAKE_CXX_FLAGS="-std=c++14"
elif [[ ${lcg_compiler} == *gcc5* ]]; then
  CMAKE_CXX_FLAGS="-std=c++14"
elif [[ ${lcg_compiler} == *gcc49* ]]; then
  CMAKE_CXX_FLAGS="-std=c++1y"
elif [[ ${lcg_compiler} == *gcc48* ]]; then
  CMAKE_CXX_FLAGS="-std=c++11"
else
  echo "ERROR! Unknown compiler ${lcg_compiler}"
  exit 1
fi
CMAKEFLAGS="-DCMAKE_CXX_FLAGS=$CMAKE_CXX_FLAGS $CMAKEFLAGS"

# Additional settings for Makefile and ninja verbosity
VERBOSE=1
CMAKEFLAGS="-DCMAKE_VERBOSE_MAKEFILE=ON $CMAKEFLAGS"

# Use ninja by default, if it exists, in the build rules generated by CMake
if ninja --version > /dev/null 2>&1; then 
  CMAKEFLAGS="-GNinja $CMAKEFLAGS"
fi

# Export the relevant variables
export CMAKEFLAGS
export LCG_mode

# Print all variables
make -f cmake.mk print

# Build all targets
make -f cmake.mk

# Install all targets
#make -f cmake.mk install

# Print the setup instructions
bintag=$(make -f cmake.mk print-BINARY_TAG)
SETUPSH="${SETUPSH}; export PATH=${PWD}/build.${bintag}:\${PATH}; export LD_LIBRARY_PATH=${PWD}/build.${bintag}:\${LD_LIBRARY_PATH}"
echo ""
echo "Build completed"
echo "--------------------------------"
echo "To set up the environment, type:"
echo "  bash"
echo "  ${SETUPSH}"
